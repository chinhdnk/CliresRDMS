@page "/changepassword"

@using System.Text

@inject ILanguageContainerService languageContainer
@inject NavigationManager navigationManager
@inject IAccountService accountService

@attribute [Authorize]
<!-- Content Header (Page header) -->
<section class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1>Change password</h1>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="#">Account</a></li>
                    <li class="breadcrumb-item active">Change password</li>
                </ol>
            </div>
        </div>
    </div><!-- /.container-fluid -->
</section>
<!-- Main content -->
<section class="content">
    <div class="container-fluid">
        <div class="row">
            <!-- left column -->
            <div class="col-md-12">
                <!-- jquery validation -->
                <div class="card card-default">
                    <div class="card-header">
                        <h3 class="card-title">Change password</h3>
                    </div>
                    <!-- /.card-header -->
                    <!-- form start -->
                    @if (changePwModel != null)
                    {
                        <EditForm Model="changePwModel" OnValidSubmit="SaveChange">
                            <AlertComponent @ref="alertComponent"></AlertComponent>
                                <div class="card-body">
                                    <div class="form-group">
                                        <label for="oldPassword">Old Password</label>
                                        <InputText type="password" @bind-Value="changePwModel.OldPassword" class="form-control" id="oldPassword" placeholder="Old Password" />
                                    </div>
                                    <div class="form-group">
                                        <label for="newPassword">Password</label>
                                        <InputText type="password" @bind-Value="changePwModel.NewPassword" class="form-control" id="newPassword" placeholder="New Password" />
                                    </div>
                                    <div class="form-group">
                                        <label for="confirmPassword">Confirm Password</label>
                                        <InputText type="password" @bind-Value="changePwModel.ConfirmPassword" class="form-control" id="confirmPassword" placeholder="Confirm Password" />
                                    </div>
                                </div>
                                <!-- /.card-body -->
                                <div class="card-footer">
                                    <button type="submit" class="btn btn-primary">@languageContainer.Keys["layout:change_pw"]</button>
                                </div>
                        </EditForm>
                    }

                </div>
                <!-- /.card -->
            </div>
            <!--/.col (left) -->
            <!-- right column -->
            <div class="col-md-6">

            </div>
            <!--/.col (right) -->
        </div>
        <!-- /.row -->
    </div><!-- /.container-fluid -->
</section>
<!-- /.content -->




@code {
    AlertComponent alertComponent;

    ChangePasswordModel changePwModel;

    protected override void OnInitialized()
    {

        changePwModel = new ChangePasswordModel();
        languageContainer.InitLocalizedComponent(this);
    }

    async Task SaveChange()
    {
        bool bSuccess = true;
        StringBuilder errorMsg = new StringBuilder();
        if (string.IsNullOrWhiteSpace(changePwModel.OldPassword))
        {
            errorMsg.Append(languageContainer.Keys["login:old_pw_required"]);
            errorMsg.Append("<br/>");
            bSuccess = false;
        }

        if (string.IsNullOrWhiteSpace(changePwModel.NewPassword))
        {
            errorMsg.Append(languageContainer.Keys["login:new_pw_required"]);
            errorMsg.Append("<br/>");
            bSuccess = false;
        }

        if (string.IsNullOrWhiteSpace(changePwModel.ConfirmPassword))
        {
            errorMsg.Append(languageContainer.Keys["login:confirm_pw_required"]);
            errorMsg.Append("<br/>");
            bSuccess = false;
        }

        if (!string.IsNullOrWhiteSpace(changePwModel.NewPassword)
            && !string.IsNullOrWhiteSpace(changePwModel.ConfirmPassword)
            && changePwModel.NewPassword!= changePwModel.ConfirmPassword)
        {
            errorMsg.Append(languageContainer.Keys["login:pw_not_match"]);
            bSuccess = false;
        }

        if(!string.IsNullOrWhiteSpace(changePwModel.OldPassword)
            && !string.IsNullOrWhiteSpace(changePwModel.NewPassword)
            && changePwModel.NewPassword == changePwModel.OldPassword)
        {
            errorMsg.Append(languageContainer.Keys["login:password_cannot_reused"]);
            bSuccess = false;
        }

        if (bSuccess)
        {
            var changePwResult = await accountService.ChangePassWord(changePwModel);
            if (string.IsNullOrWhiteSpace(changePwResult))
            {
                await accountService.Logout();
                navigationManager.NavigateTo("/", true);
            }
            else
            {
                alertComponent.Message = changePwResult;
                alertComponent.Show();
            }

        }
        else
        {
            alertComponent.Message = errorMsg.ToString();
            alertComponent.Show();
        }
    }

}
