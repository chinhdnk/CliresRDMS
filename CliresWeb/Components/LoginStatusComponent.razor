@inject NavigationManager navigationManager
@inject IAccountService accountService
@inject ILanguageContainerService languageContainer

@if (userName != null)
{
    <li class="nav-item dropdown d-none d-sm-inline-block">
        <a href="#" class="nav-link" data-toggle="dropdown">@languageContainer.Keys["layout:welcome"] @fullName <i class="far fa-users"></i></a>
        <div class="dropdown-menu dropdown-menu-lg dropdown-menu-right" style="left: inherit; right: 0px;">
            <span class="dropdown-item dropdown-header"></span>
            <div class="dropdown-divider"></div>
            <a href="#" @onclick="ChangePassword" class="dropdown-item" data-toggle="modal" data-target="#modal-changpass">
                <i class="fa fa-key" aria-hidden="true"></i> @languageContainer.Keys["layout:change_pw"]
            </a>
            <div class="dropdown-divider"></div>
            <a href="#" @onclick="Logout" class="dropdown-item dropdown-footer">
                <i class="fa fa-sign-out" aria-hidden="true"></i> @languageContainer.Keys["layout:sign_out"]
            </a>
        </div>
    </li>
}

@code {

    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }

    string userName;
    string fullName;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        var user = authState.User;
        userName = user.FindFirst(c => c.Type == "unique_name")?.Value;
        fullName = user.FindFirst(c => c.Type == "FullName")?.Value;
        languageContainer.InitLocalizedComponent(this);
    }

    private void ChangePassword()
    {
        navigationManager.NavigateTo("/changepassword", true);
    }
    async Task Logout()
    {
        await accountService.Logout();
        navigationManager.NavigateTo("/", true);
    }

}
